// cerr << j << ": " << currDist << endl;

		// printf("%d,%d\n", j, currDist);
		// MATCH =========

			// cerr << "" << endl;
			// cerr << posicaoAtual << ":" << currDist << endl;
			// cerr << "" << endl;

		// if(1 >= 90)
		// {

		// 	int m2 = 3;
		// 	currDist = m2;
		// 	string P2 = "";

		// 	for (int z = 0; z < m2; ++z)
		// 	{
		// 		if((j+z) < n) P2 += T[j+z];
		// 	}

		// 	// cerr << "J: " << j << endl;
		// 	// cerr << "P2: " << P2 << endl;

		// 	// ComputePM ////////////////////////////////////////
		// 	long PM2[MAXCHAR];
		// 	for (int ii = 0; ii < MAXCHAR; ii++) PM2[ii] = 0;
		// 	for (int ii = 1; ii <= P2.length(); ii++){
		// 		long temp = 1 << (ii-1);
		// 		PM2[P2[ii-1]+127] = PM2[P2[ii-1]+127] | temp;
		// 		// cerr << ii - 1 << ": " << PM[P[ii-1]+127] << endl;
		// 	}
		// 	////////////////////////////////////////////////////
		// 	long VN = 0;
		// 	long VP = 0xffffffff;
		// 	long D0 = 0, HP = 0, HN = 0;

		// 	inicializador = 0;
		// 	// quantGrupo = 0;

		// 	for (int jj = 0; jj < m; ++jj)
		// 	{

		// 		// posicaoAtual = j+jj+1;				

		// 	// Step(j); ///////////////////////////////////////////////
		// 		D0 = (((PM2[P[jj]+127] & VP) + VP) ^ VP) | PM2[P[jj]+127] | VN;
		// 		HP = VN | ~ (D0 | VP);
		// 		HN = VP & D0;
		// 		VP = (HN << 1) | ~ (D0 | (HP << 1));
		// 		VN = (HP << 1) & D0;
		// 	///////////////////////////////////////////////////////////

		// 		if ((HP & 0x80000000) == 0x80000000) currDist += 1;
		// 		else if((HN & 0x80000000) == 0x80000000) currDist -= 1;


		// 		if (currDist <= 1)
		// 		{

		// 			inicializador++;

		// 		}

		// 		if(jj == (m-1))
		// 		{

		// 			if(inicializador > 0)
		// 			{

		// 				int nega = m2*(-1);
		// 				indexx.insert(indexx.begin(), nega);
		// 				indexx.insert(indexx.begin(), posicaoAtual);

		// 			}

		// 		}

		// }	

		// // Janela deslizante em 3 posicoes
		// j += 2 - 1;

		// }else{

			// if(posicaoAtual >= 90)
			// {
			// 	k = m/2;
			// }